<?xml version="1.0" encoding="UTF-8"?>
<xs:schema version="1.0" xmlns:xs="http://www.w3.org/2001/XMLSchema"
	xmlns:dyd="http://www.power_systems_on_modelica.org/schema/dyd/1_0"
	targetNamespace="http://www.power_systems_on_modelica.org/schema/dyd/1_0"
	elementFormDefault="qualified">

	<!-- Root element may be a set of system definitions, a container of models 
		or container of parameter sets -->
	<xs:complexType name="Stageable">
		<xs:attribute name="stage" use="optional" type="dyd:Stage"
			default="SIMULATION" />
	</xs:complexType>
	<xs:element name="model_container">
		<xs:complexType>
			<xs:choice minOccurs="0" maxOccurs="unbounded">
				<xs:element name="association" type="dyd:Association" />
				<xs:element name="model" type="dyd:Model" />
			</xs:choice>
		</xs:complexType>
	</xs:element>
	<xs:element name="parameters">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="set" type="dyd:ParameterSet" minOccurs="1"
					maxOccurs="unbounded" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:simpleType name="nonEmptyString">
		<xs:restriction base="xs:string">
			<xs:minLength value="1" />
		</xs:restriction>
	</xs:simpleType>

	<!-- Dynamic models -->
	<xs:complexType name="Association">
		<xs:attribute name="pattern" use="optional" type="dyd:nonEmptyString" />
		<xs:attribute name="id" use="required" type="dyd:nonEmptyString" />
	</xs:complexType>
	<xs:complexType name="Model">
		<xs:complexContent>
			<xs:extension base="dyd:Stageable">
				<xs:sequence>
					<!-- TODO Review -->
					<!-- system definitions for initialization stage do not need components, 
						so minOccurs = 0 -->
					<xs:element name="component" type="dyd:Component"
						minOccurs="0" maxOccurs="unbounded" />
					<xs:element name="connection" type="dyd:Connection"
						minOccurs="0" maxOccurs="unbounded" />

					<!-- Initialization models do not need interconnections, thus we have 
						to set minOccurs = 0 -->
					<xs:element name="interconnection" type="dyd:Interconnection"
						minOccurs="0" maxOccurs="unbounded" />

					<xs:element name="equation" type="dyd:Equation"
						minOccurs="0" maxOccurs="unbounded" />
				</xs:sequence>

				<!-- The model applies either to a staticId, an association, a type or 
					an event -->

				<xs:attribute name="staticId" use="optional" type="dyd:nonEmptyString" />
				<xs:attribute name="id" use="optional" type="dyd:nonEmptyString" />

				<xs:attribute name="association" use="optional"
					type="dyd:nonEmptyString" />

				<xs:attribute name="type" use="optional" type="dyd:StaticType" />

				<xs:attribute name="event" use="optional" type="dyd:nonEmptyString" />
				<xs:attribute name="injection" use="optional" type="dyd:EventInjection" />
				<xs:attribute name="appliesTo" use="optional" type="dyd:StaticType" />
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:simpleType name="StaticType">
		<xs:restriction base="xs:string">
			<xs:enumeration value="Bus" />
			<xs:enumeration value="Line" />
			<xs:enumeration value="Transformer" />
			<xs:enumeration value="Load" />
			<xs:enumeration value="Shunt" />
			<xs:enumeration value="Generator" />
			<xs:enumeration value="Switch" />
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="Stage">
		<xs:restriction base="xs:string">
			<xs:enumeration value="INITIALIZATION" />
			<xs:enumeration value="SIMULATION" />
		</xs:restriction>
	</xs:simpleType>
	<xs:complexType name="Component">
		<xs:group ref="dyd:parameterItem" minOccurs="0" maxOccurs="unbounded" />
		<xs:attribute name="type" use="required" type="dyd:nonEmptyString" />
		<xs:attribute name="id" use="optional" type="dyd:nonEmptyString" />
		<!-- There are two ways of defining parameters of a component: reference 
			to parameterSet or explicit list -->
		<xs:attribute name="parFile" use="optional" type="dyd:nonEmptyString" />
		<xs:attribute name="parId" use="optional" type="dyd:nonEmptyString" />
		<!-- A component may not have instantiation parameters but a direct assignment 
			of a value -->
		<xs:attribute name="value" use="optional" type="xs:string" />
		<xs:attribute name="isParameter" use="optional" type="xs:boolean"
			default="false" />
	</xs:complexType>
	<xs:complexType name="Interconnection">
		<xs:attribute name="name" use="optional" type="dyd:nonEmptyString" />
		<xs:attribute name="componentId" use="optional" type="dyd:nonEmptyString" />
		<xs:attribute name="componentVar" use="optional"
			type="dyd:nonEmptyString" />
		<xs:attribute name="targetModel" use="optional" type="dyd:nonEmptyString" />
		<xs:attribute name="targetName" use="optional" type="dyd:nonEmptyString" />
		<xs:attribute name="targetModel2" use="optional"
			type="dyd:nonEmptyString" />
		<xs:attribute name="targetName2" use="optional" type="dyd:nonEmptyString" />
	</xs:complexType>
	<xs:complexType name="Connection">
		<xs:attribute name="id1" use="required" type="dyd:nonEmptyString" />
		<xs:attribute name="var1" use="required" type="dyd:nonEmptyString" />
		<xs:attribute name="id2" use="required" type="dyd:nonEmptyString" />
		<xs:attribute name="var2" use="required" type="dyd:nonEmptyString" />
	</xs:complexType>

	<!-- Parameters -->
	<xs:complexType name="ParameterSet">
		<xs:group ref="dyd:parameterItem" minOccurs="1" maxOccurs="unbounded" />
		<xs:attribute name="id" use="required" type="dyd:nonEmptyString" />
	</xs:complexType>
	<xs:group name="parameterItem">
		<xs:choice>
			<xs:element name="par" type="dyd:ParameterValue" />
			<xs:element name="ref" type="dyd:ParameterReference" />
		</xs:choice>
	</xs:group>
	<xs:complexType name="ParameterValue">
		<xs:attribute name="type" use="optional" type="dyd:ValueType"
			default="STRING" />
		<xs:attribute name="unit" use="optional" type="dyd:nonEmptyString" />
		<xs:attribute name="name" use="required" type="dyd:nonEmptyString" />
		<xs:attribute name="value" use="required" type="dyd:nonEmptyString" />
		<xs:attribute name="isGeneric" use="optional" type="xs:boolean"
			default="false" />
	</xs:complexType>
	<xs:complexType name="ParameterReference">
		<xs:attribute name="name" use="required" type="dyd:nonEmptyString" />
		<xs:attribute name="unit" use="optional" type="dyd:nonEmptyString" />
		<xs:attribute name="dataSource" use="required" type="dyd:DataSource" />
		<xs:attribute name="sourceName" use="required" type="dyd:nonEmptyString" />
	</xs:complexType>
	<xs:simpleType name="ValueType">
		<xs:restriction base="xs:string">
			<xs:enumeration value="STRING" />
			<xs:enumeration value="DOUBLE" />
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="DataSource">
		<xs:restriction base="xs:string">
			<xs:enumeration value="IIDM" />
			<xs:enumeration value="INIT" />
			<xs:enumeration value="EVENT" />
			<xs:enumeration value="DYNN" />
			<xs:enumeration value="PREVIOUS_DYNAMIC_MODEL" />
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="EventInjection">
		<xs:restriction base="xs:string">
			<xs:enumeration value="ADD" />
			<xs:enumeration value="REPLACE" />
		</xs:restriction>
	</xs:simpleType>


	<!-- TODO Equations will eventually disappear, when we support omegaRef 
		as a block -->
	<xs:complexType name="Equation">
		<xs:complexContent>
			<xs:extension base="dyd:Stageable">
				<xs:choice>
					<xs:element name="equal" type="dyd:Equal" />
					<xs:element name="unparsed" /><!-- FIXME allow only text -->
				</xs:choice>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="Equal">
		<xs:sequence>
			<xs:element name="left" type="dyd:Expression" />
			<xs:element name="right" type="dyd:Expression" />
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="Expression">
		<xs:choice>
			<xs:element name="sum" type="dyd:Sum" />
			<xs:element name="product" type="dyd:Product" />
			<xs:element name="quotient" type="dyd:Quotient" />
			<xs:element name="literal" type="dyd:LiteralExpression" />
		</xs:choice>
	</xs:complexType>
	<xs:complexType name="Sum">
		<xs:complexContent>
			<xs:extension base="dyd:Factors"></xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="Product">
		<xs:complexContent>
			<xs:extension base="dyd:Factors"></xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="LiteralExpression" mixed="true">
	</xs:complexType>
	<xs:complexType name="Quotient">
		<xs:sequence>
			<xs:element name="dividend" type="dyd:Expression" />
			<xs:element name="divisor" type="dyd:Expression" />
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="Factors">
		<xs:choice>
			<xs:element name="forAll" type="dyd:ForAll" />
			<!-- other options: a collection of literal expressions -->
			<xs:element name="factor" type="dyd:Expression" minOccurs="2"
				maxOccurs="unbounded" />
		</xs:choice>
	</xs:complexType>
	<xs:complexType name="ForAll">
		<xs:sequence>
			<xs:group ref="dyd:Selector" />
			<xs:element name="template" type="dyd:TemplateExpression" />
		</xs:sequence>
	</xs:complexType>
	<xs:group name="Selector">
		<xs:choice>
			<xs:element name="or" type="dyd:Selectors" />
			<xs:element name="and" type="dyd:Selectors" />
			<xs:element name="startsWith" type="dyd:PrefixSelector" />
			<!-- Add others here ... -->
		</xs:choice>
	</xs:group>
	<xs:complexType name="Selectors">
		<xs:group ref="dyd:Selector" minOccurs="2" maxOccurs="unbounded" />
	</xs:complexType>
	<xs:complexType name="PrefixSelector">
		<xs:attribute name="prefix" />
	</xs:complexType>
	<xs:complexType name="TemplateExpression" mixed="true">
		<xs:attribute name="variable" />
	</xs:complexType>
</xs:schema>