#!/bin/bash
#
# Copyright (c) 2017 - 2018, RTE (http://www.rte-france.com)
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#
# @author Luma Zamarre√±o <zamarrenolm at aia.es>
#


if [[ "$1" == "" ]];
then
	echo "missing the name for distribution"
	echo "As an example: 0.1-201702271000"
	echo "will generate two files: psm-0.1-201702271000.zip and psm-0.1-201702271000-validation_data.zip"
	exit
fi

echo ""
echo ""
echo "Prepare PSM for distribution ..."
echo ""

MODELICA_VERSION=1.11.0
echo "Modelica library used will be version ${MODELICA_VERSION}"

PSM_ZIP_FILE="psm-$1.zip"
PSM_VALIDATION_DATA_FILE="psm-$1-validation_data.zip"
BUILD=$2
DIST_TMP_FOLDER=dist_tmp
VALIDATION_DATA_TMP_FOLDER=vdata_tmp

echo ""
echo "Creating ${PSM_ZIP_FILE}"
echo "Using temporal folder ${DIST_TMP_FOLDER}"
if [[ "${BUILD}" == "build" ]];
then
	echo "Performing build before preparing packaging"
else
	echo "Without building the project"
fi

echo "    Preparing temporal folder"
rm -rf $DIST_TMP_FOLDER
mkdir -p $DIST_TMP_FOLDER
mkdir -p $DIST_TMP_FOLDER/data
mkdir -p $DIST_TMP_FOLDER/hades2LF
mkdir -p $DIST_TMP_FOLDER/helmflow/linux
mkdir -p $DIST_TMP_FOLDER/helmflow/windows
mkdir -p $DIST_TMP_FOLDER/lib

if [[ "${BUILD}" == "build" ]];
then
	echo "    Building the project"
	mvnw clean install -DskipTests &> ${DIST_TMP_FOLDER}/build.log

# Instead of building a fat jar with all dependencies we have added "...-wardep" modules that store a "lib" folder inside the ".war" target file
#	echo "    Building jar with dependencies in GUI module"
#	mvnw -offline compile assembly:single --projects gui &> ${DIST_TMP_FOLDER}/gui.log
#	echo "    Building jar with dependencies in DYMOLA-INTEGRATION-SERVICE module"
#	mvnw -offline compile assembly:single --projects dymola-integration-service &> ${DIST_TMP_FOLDER}/dymola.log
#	echo "    Building jar with dependencies in TOOLS module"
#	mvnw -offline compile assembly:single --projects tools &> ${DIST_TMP_FOLDER}/tools.log
fi

echo "    Preparing data files"
# Some files that are not distributed:
# conversion.properties and simulation.properties are generated by the application to temporarily store last process run
# iidmNames.properties is only used by the tool that builds DYD files from existing Modelica documents
rsync -avP \
	--exclude='.*' \
	--exclude='tmp/*' \
	--exclude='test_library/*' \
	--exclude='test_private/*' \
	--exclude='*/validation/*' \
	--exclude='*/ddr/fake_init.csv' \
	--exclude='dyd_files_from_modelica/*' \
	--exclude='modelica-parser/*' \
	--exclude='kk*' \
	--exclude='cfg/conversion.properties*' \
	--exclude='cfg/simulation.properties*' \
	--exclude='cfg/iidmNames.properties*' \
	--exclude='test/ieee14/ieee14bus.zip' \
	--prune-empty-dirs \
	data/* $DIST_TMP_FOLDER/data/. &> ${DIST_TMP_FOLDER}/data.log
# Remove result files from copied test data
find ${DIST_TMP_FOLDER}/data/test -type f -name "*.mo" -exec rm -f {} \;
find ${DIST_TMP_FOLDER}/data/test -type f -name "*.xiidm" -exec rm -f {} \;
find ${DIST_TMP_FOLDER}/data/test -type f -name "*.mat" -exec rm -f {} \;
echo "    Override configuration files with distribution-specific ones"
rsync -avP scripts/dist/cfg/* $DIST_TMP_FOLDER/data/cfg/. &> ${DIST_TMP_FOLDER}/data.log
rsync -avP ddr-dyd-files/src/main/resources/xsd/dyd.xsd $DIST_TMP_FOLDER/data/cfg/. >> ${DIST_TMP_FOLDER}/data.log 2>&1

echo "    Copying Hades2"
rsync -avP ../hades/hades2LF/* $DIST_TMP_FOLDER/hades2LF/. &> ${DIST_TMP_FOLDER}/hades.log

echo "    Copying HELM FLow"
rsync -avP ../helmflow/linux_binaries/* $DIST_TMP_FOLDER/helmflow/linux/. &> ${DIST_TMP_FOLDER}/helmflow.log
rsync -avP ../helmflow/windows_binaries/* $DIST_TMP_FOLDER/helmflow/windows/. &> ${DIST_TMP_FOLDER}/helmflow.log

echo "    Preparing additional Java libraries"
# From https://stackoverflow.com/questions/1729054/including-dependencies-in-a-jar-with-maven
# No need to explicitly copy modelica_jva library, dependency from tools and/or gui
#rsync -avP ../openmodelica/${MODELICA_VERSION}/modelica_java.jar $DIST_TMP_FOLDER/lib/. &> ${DIST_TMP_FOLDER}/jars.log 2>&1
# No need to explicitly copy helmflow core library because it will be taken as dependency from tools and/or gui
#rsync -avP ../helmflow/helmflow-core-${HELMFLOW_VERSION}*.jar $DIST_TMP_FOLDER/lib/. >> ${DIST_TMP_FOLDER}/jars.log 2>&1
unzip -xjn gui-wardep/target/*war "WEB-INF/lib/*" -d $DIST_TMP_FOLDER/lib/. >> ${DIST_TMP_FOLDER}/jars.log 2>&1
unzip -xjn tools-wardep/target/*war "WEB-INF/lib/*" -d $DIST_TMP_FOLDER/lib/. >> ${DIST_TMP_FOLDER}/jars.log 2>&1
unzip -xjn dymola-integration-service-wardep/target/*war "WEB-INF/lib/*" -d $DIST_TMP_FOLDER/lib/. >> ${DIST_TMP_FOLDER}/jars.log 2>&1
./scripts/dist/build_psm_services_jar.sh psm-services.jar >> ${DIST_TMP_FOLDER}/jars.log 2>&1
mv psm-services.jar $DIST_TMP_FOLDER/lib/.
# Remove bad dependencies (sisu-guava is a patched guava that is taken from Antlr plugin, it is older than version explicitly declared in project)
rm -f $DIST_TMP_FOLDER/lib/sisu-guava*jar

echo "    Preparing scripts"
rsync -avP scripts/dist/psmgui $DIST_TMP_FOLDER/. &> ${DIST_TMP_FOLDER}/scripts.log
rsync -avP scripts/dist/psmgui.cmd $DIST_TMP_FOLDER/. &> ${DIST_TMP_FOLDER}/scripts.log
rsync -avP scripts/dist/psm $DIST_TMP_FOLDER/. &> ${DIST_TMP_FOLDER}/scripts.log
rsync -avP scripts/dist/psm.cmd $DIST_TMP_FOLDER/. &> ${DIST_TMP_FOLDER}/scripts.log
rsync -avP scripts/dist/dymola_integration_service.cmd $DIST_TMP_FOLDER/. >> ${DIST_TMP_FOLDER}/scripts.log 2>&1

echo "    Preparing additional files (release notes, ...)"
rsync -avP ReleaseNotes.txt $DIST_TMP_FOLDER/. &>  ${DIST_TMP_FOLDER}/other_files.log

echo "    Creating distribution package"
BAK_CD=$(pwd)
cd $DIST_TMP_FOLDER && zip -r psm.zip * --exclude \*.log &> zip.log
cd $BAK_CD
mv $DIST_TMP_FOLDER/psm.zip $PSM_ZIP_FILE

echo "    Delete temporal folder"
#rm -rf $DIST_TMP_FOLDER

echo ""
echo "Creating ${PSM_VALIDATION_DATA_FILE}"
echo "Using temporal folder ${VALIDATION_DATA_TMP_FOLDER}"

echo "    Preparing temporal folder"
rm -rf ${VALIDATION_DATA_TMP_FOLDER}
mkdir -p ${VALIDATION_DATA_TMP_FOLDER}/data

echo "    Copying data files"
rsync -avP --include='*/' --include='validation/***' --exclude='*' --prune-empty-dirs data/ ${VALIDATION_DATA_TMP_FOLDER}/data/. &> ${VALIDATION_DATA_TMP_FOLDER}/data.log
# Remove any folder named "*private*" from the copied validation data
find ${VALIDATION_DATA_TMP_FOLDER}/. -type d -name "*private*" -exec rm -rf {} + &> ${VALIDATION_DATA_TMP_FOLDER}/data.log

echo "    Creating validation data distributable package"
cd ${VALIDATION_DATA_TMP_FOLDER} && zip -r psmdv.zip * --exclude \*.log &> zip.log
cd $BAK_CD
mv ${VALIDATION_DATA_TMP_FOLDER}/psmdv.zip ${PSM_VALIDATION_DATA_FILE}

echo "    Delete temporal folder"
#rm -rf ${PSM_VALIDATION_DATA_FILE}

